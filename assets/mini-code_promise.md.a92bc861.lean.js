import{testCase as p}from"./chunks/base.aa79cb2a.js";import{testCase as o}from"./chunks/async.d08b96f7.js";import{testCase as e}from"./chunks/multi-calls.330f44d5.js";import{testCase as t}from"./chunks/chain.dcb25ff6.js";import{testCase as c}from"./chunks/chain-async.c1ac6ee0.js";import{testCase as r}from"./chunks/chain-cycle.ad064a2e.js";import{i as y,o as F,c as D,f as a,j as l,a as s}from"./app.8e5e362f.js";const i=s("",6),C=s("",3),A=s("",3),f=s("",3),E=s("",2),h=s("",2),u=s("",3),L=JSON.parse('{"title":"Promise","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"最基本的实现","slug":"最基本的实现","link":"#最基本的实现","children":[]},{"level":2,"title":"加入异步","slug":"加入异步","link":"#加入异步","children":[]},{"level":2,"title":"多次调用","slug":"多次调用","link":"#多次调用","children":[]},{"level":2,"title":"支持链式调用","slug":"支持链式调用","link":"#支持链式调用","children":[]},{"level":2,"title":"then回调中返回promise的情况","slug":"then回调中返回promise的情况","link":"#then回调中返回promise的情况","children":[]},{"level":2,"title":"处理promise循环调用自身的边界逻辑判断","slug":"处理promise循环调用自身的边界逻辑判断","link":"#处理promise循环调用自身的边界逻辑判断","children":[]},{"level":2,"title":"未完待续~","slug":"未完待续","link":"#未完待续","children":[]},{"level":2,"title":"完整的代码","slug":"完整的代码","link":"#完整的代码","children":[]}],"relativePath":"mini-code/promise.md","lastUpdated":1678195789000}'),d={name:"mini-code/promise.md"},N=Object.assign(d,{setup(m){return(v,b)=>{const n=y("playground");return F(),D("div",null,[i,a(n,{module:"promise/base",code:l(p)},null,8,["code"]),C,a(n,{module:"promise/async",code:l(o)},null,8,["code"]),A,a(n,{module:"promise/multi-calls",code:l(e)},null,8,["code"]),f,a(n,{module:"promise/chain",code:l(t)},null,8,["code"]),E,a(n,{module:"promise/chain-async",code:l(c)},null,8,["code"]),h,a(n,{module:"promise/chain-cycle",code:l(r)},null,8,["code"]),u])}}});export{L as __pageData,N as default};
