import{_ as e,o,c as a,M as r}from"./chunks/framework.ee95ef74.js";const p=JSON.parse('{"title":"Recursion","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/recursion.md","filePath":"algorithm/recursion.md","lastUpdated":1693405640000}'),t={name:"algorithm/recursion.md"},i=r('<h1 id="recursion" tabindex="-1">Recursion <a class="header-anchor" href="#recursion" aria-label="Permalink to &quot;Recursion&quot;">​</a></h1><p>递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中，然后递归返回的时候，从栈顶弹出上一次递归的各项参数，所以这就是递归为什么可以返回上一层位置的原因。</p><h2 id="递归算法三要素" tabindex="-1">递归算法三要素 <a class="header-anchor" href="#递归算法三要素" aria-label="Permalink to &quot;递归算法三要素&quot;">​</a></h2><ol><li><code>确定递归函数的参数和返回值</code>：确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数，并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型</li><li><code>确定终止条件</code>：写完了递归算法，运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出</li><li><code>确定单层递归的逻辑</code>：确定每一层递归需要处理的信息，在这里也就会重复调用自己来实现递归的过程</li></ol>',4),c=[i];function s(n,l,d,_,h,u){return o(),a("div",null,c)}const f=e(t,[["render",s]]);export{p as __pageData,f as default};
