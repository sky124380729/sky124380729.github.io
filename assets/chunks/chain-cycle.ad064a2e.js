var f=Object.defineProperty;var d=(t,s,e)=>s in t?f(t,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[s]=e;var i=(t,s,e)=>(d(t,typeof s!="symbol"?s+"":s,e),e);const n="pending",h="fulfilled",r="rejected";class a{constructor(s){i(this,"status",n);i(this,"value");i(this,"reason");i(this,"successCallback",[]);i(this,"failCallback",[]);i(this,"resolve",s=>{if(this.status===n)for(this.status=h,this.value=s;this.successCallback.length;)this.successCallback.shift()(this.value)});i(this,"reject",s=>{if(this.status===n)for(this.status=r,this.reason=s;this.failCallback.length;)this.failCallback.shift()(this.value)});s(this.resolve,this.reject)}then(s,e){let l=new a((u,c)=>{if(this.status===h){let o=s(this.value);p(l,o,u,c)}else this.status===r?e(this.reason):(this.successCallback.push(s),this.failCallback.push(e))});return l}}function p(t,s,e,l){if(t===s)return l(new TypeError("Chaining cycle detected for promise #<Promise>"));s instanceof a?s.then(e,l):e(s)}function v(t){new t(e=>{e("成功")}).then(e=>(console.log(e),new t(l=>{l("other")}))).then(e=>{console.log(e)})}export{a as default,v as testCase};
