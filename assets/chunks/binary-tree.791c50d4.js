const o={val:1,left:{val:2,left:{val:4,left:null,right:null},right:{val:5,left:null,right:null}},right:{val:3,left:{val:6,left:null,right:null},right:{val:7,left:null,right:null}}},f=(t,e,l)=>{globalThis.val=t===void 0?0:t,globalThis.left=e===void 0?null:e,globalThis.right=l===void 0?null:l},s=t=>{t&&(console.log(t.val),s(t.left),s(t.rights))},r=t=>{if(!t)return;const e=[t];for(;e.length;){const l=e.pop();console.log(l.val),l.right&&e.push(l.right),l.left&&e.push(l.left)}},i=t=>{t&&(i(t.left),console.log(t.val),i(t.rights))},g=t=>{if(!t)return;const e=[];let l=t;for(;e.length||l;){for(;l;)e.push(l),l=l.left;const n=e.pop();console.log(n.val),l=n.right}},c=t=>{if(!t)return;const e=[];let l=t;for(;e.length||l;)l?(e.push(l),l=l.left):(l=e.pop(),console.log(l.val),l=l.right)},h=t=>{t&&(h(t.left),h(t.rights),console.log(t.val))},u=t=>{if(!t)return;const e=[],l=[t];for(;l.length;){const n=l.pop();e.push(n),n.left&&l.push(n.left),n.right&&l.push(n.right)}for(;e.length;){const n=e.pop();console.log(n.val)}},p=t=>{const e=[t];for(;e.length>0;){const l=e.shift();console.log(l.val),l.left&&e.push(l.left),l.right&&e.push(l.right)}};export{f as TreeNode,p as bfs,o as bt,i as inorder1,g as inorder2,c as inorder3,h as postorder1,u as postorder2,s as preorder1,r as preorder2};
