import{_ as e,E as h,c as p,m as s,a as i,J as n,w as l,V as t,o as k}from"./chunks/framework.OaYh-_yc.js";const C=JSON.parse('{"title":"微前端框架(wujie)实战总结","description":"","frontmatter":{},"headers":[],"relativePath":"columns/wujie/index.md","filePath":"columns/wujie/index.md","lastUpdated":1706930496000}'),r={name:"columns/wujie/index.md"},d=s("h1",{id:"微前端框架-wujie-实战总结",tabindex:"-1"},[i("微前端框架(wujie)实战总结 "),s("a",{class:"header-anchor",href:"#微前端框架-wujie-实战总结","aria-label":'Permalink to "微前端框架(wujie)实战总结"'},"​")],-1),E=s("p",null,"十月份的时候接到一个项目，客户对于老的系统（10年前jsp开发）的UI以及功能上不满意，觉得已经跟不上时代的步伐，要求我们做出优化。 由于项目是个稳定运行多年的IOT产品，大刀阔斧的直接重构会带来非常大的风险：",-1),c=s("ul",null,[s("li",null,"承接优化工作的团队成员都不熟悉该项目，即对于该项目来说都是新人，包括我自己"),s("li",null,"没有原始需求文档以及功能说明"),s("li",null,"没有单元测试，系统测试等用例")],-1),g=s("p",null,"但是如果继续在老的架构上优化，无法达到客户预期（包括维护效率），于是我提出了【渐进式重构】的思路：即使用全新的前端架构作为底座（不限技术栈），将老系统各个菜单接入进来，保证线上项目正常运行的同时，逐个菜单进行重构，这样使风险降到最小，并且降低了交付周期的压力",-1),o=t("",62);function y(u,b,F,m,f,A){const a=h("n-button");return k(),p("div",null,[d,E,c,g,s("p",null,[i("基于之前写的文章"),n(a,{type:"primary",text:"",target:"_blank",tag:"a",href:"/columns/micro-frontend/"},{default:l(()=>[i("浅析微前端")]),_:1}),i("一文，我最终决定采用"),n(a,{type:"primary",text:"",target:"_blank",tag:"a",href:"https://wujie-micro.github.io/doc/"},{default:l(()=>[i("wujie")]),_:1}),i("作为微前端框架，以下总结一下在实际接入过程中遇到的问题以及解决方案")]),o])}const v=e(r,[["render",y]]);export{C as __pageData,v as default};
